function varargout = FiltreConvol1D(varargin)% Filtrage linéaire spatial par convolution 1D% Traitement marginal des images à P plans% % INPUT:% - image PxQ% - cell array des paramètres :%   + opération : 'average' | 'disk' | 'gaussian' |'unsharp'%   + dimension N pour un noyau de convolution de taille (2N+1,2N+1)%    (inutilisé avec 'unsharp' (N = 1))%% OUTPUT:% - image PxQ %% INFOS:% - filtre gaussien : sigma = (2*N+1)/6% - unsharp : réhausseur de contraste (image - laplacien 3x3)% - convolution : gestion des bords par réplication%% Plugin for OpenIsaac% version 1% © 2011-2018 Alain Clément - Université d'Angers%---------------------------------------------------------------------------------------------------% Copyright 2007 - 2018 Université d'Angers - Author: Alain Clément%% This program is free software; you can redistribute it and/or modify it under the terms of the GNU% General Public License as published by the Free Software Foundation; either version 3 of the% License, or any later version. This program is distributed in the hope that it will be useful, but% WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A% PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received% a copy of the GNU General Public License along with this program; if not, write to the Free% Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.%---------------------------------------------------------------------------------------------------% PLUGIN PARAMETERSif (nargin == 1) && strcmp(varargin{1},'-f')    % input	varargout{1} = {'IMG','image source', ...					'DATA','cell array des paramètres'};    % output	varargout{2} = {'IMG','image résultat'};	returnend	% INPUTObjIMG = varargin{1};DataVal = IsaacDATA_get(varargin{2},'Val');oper = DataVal{1};dimN = DataVal{2};%---------------------------------------------------------------------------------------------------switch opercase{'average','disk'}	h = fspecial(oper,2*dimN+1);case{'gaussian'}	h = fspecial(oper,2*dimN+1,(2*dimN+1)/6);case 'unsharp'	h = fspecial(oper);otherwise	error('opération invalide')end% bug MATLAB 2010b : imfilter(img 32/64bits,fspecial('unsharp')) retourne des valeurs <0 et >1if strcmp(oper,'unsharp') && ismember(IsaacIMG_get(ObjIMG,'BitClass'),[32,64])	% conversion sur 16 bits pour imfilter	img = IsaacIMG_img2mat(ObjIMG,'uint16');else	% conversion sur BitClass (sinon valeurs incorrectes avec 'unsharp')	img = IsaacIMG_img2mat(ObjIMG,'BitClass');end% fspecial produit un "correlation kernel" = convolution kernel avec rotation de 180°ObjIMG = IsaacIMG_mat2img(ObjIMG,imfilter(img,h,'conv','replicate'));%---------------------------------------------------------------------------------------------------% OUTPUTvarargout{1} = ObjIMG;		