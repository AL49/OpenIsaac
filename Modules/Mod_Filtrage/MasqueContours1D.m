function varargout = MasqueContours1D(varargin)% Masque de contours par filtrage linéaire spatial 1D% Traitement marginal des images à P plans% % INPUT:% - image PxQ% - valeur texte opération : 'sobel' | 'prewitt' | 'roberts' | 'log' | 'canny' | 'zerocross' %% OUTPUT:% - image Px1%% INFOS:% - 'log' : Laplacian of Gaussian Method (taille (2N+1,2N+1), N = 3*sigma, sigma = 2)%% Plugin for OpenIsaac% version 1% © 2011-2018 Alain Clément - Université d'Angers%---------------------------------------------------------------------------------------------------% Copyright 2007 - 2018 Université d'Angers - Author: Alain Clément%% This program is free software; you can redistribute it and/or modify it under the terms of the GNU% General Public License as published by the Free Software Foundation; either version 3 of the% License, or any later version. This program is distributed in the hope that it will be useful, but% WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A% PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received% a copy of the GNU General Public License along with this program; if not, write to the Free% Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.%---------------------------------------------------------------------------------------------------% PLUGIN PARAMETERSif (nargin == 1) && strcmp(varargin{1},'-f')    % input	varargout{1} = {'IMG','image source', ...					'DATA','opération'};    % output	varargout{2} = {'IMG','image binaire résultat'};	returnend	% INPUTObjIMG = varargin{1};oper = IsaacDATA_get(varargin{2},'Val');%---------------------------------------------------------------------------------------------------switch opercase{'sobel','prewitt','roberts','log','canny','zerocross'}	img1 = IsaacIMG_img2mat(ObjIMG);	nbp = IsaacIMG_get(ObjIMG,'DimZ');	img2 = false(size(img1));	for k = 1:nbp		img2(:,:,k) = edge(img1(:,:,k),oper);		end	% suppression de l'espace colorimétrique si il existe	if IsaacIMG_get(ObjIMG,'IsColorSpace')		ObjIMG = IsaacIMG_set(ObjIMG,'ColorSpace',[]);	end		% forcer le changement de nbbits	ObjIMG = IsaacIMG_mat2img(ObjIMG,img2,'ChangeBits');otherwise	error('opération invalide')end%---------------------------------------------------------------------------------------------------% OUTPUTvarargout{1} = ObjIMG;	